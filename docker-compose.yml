version: '3.8'

services:
  master:
    image: postgres:latest
    container_name: pg_master
    restart: unless-stopped
    command: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD}
      PRIMARY_ROLE: "true"
    volumes:
      - ./init-master.sh:/docker-entrypoint-initdb.d/init-master.sh:ro
      - pg_master_data:/var/lib/postgresql/data
    ports:
      - "${MASTER_PORT}:5432"
    networks:
      - pg_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  slave1:
    image: postgres:latest
    container_name: pg_slave1
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REPLICATE_FROM: master
    command: >
      bash -c "rm -rf /var/lib/postgresql/data/* &&
      until PGPASSWORD=${POSTGRES_PASSWORD} pg_basebackup -h master -D /var/lib/postgresql/data -U ${POSTGRES_USER} -P -R -X stream -S slave1_slot; do
        echo 'Waiting for master to be ready...';
        sleep 5;
      done &&
      touch /var/lib/postgresql/data/standby.signal &&
      echo \"primary_conninfo = 'host=master port=5432 user=${POSTGRES_USER} password=${POSTGRES_PASSWORD} application_name=slave1'\" >> /var/lib/postgresql/data/postgresql.auto.conf &&
      exec docker-entrypoint.sh postgres"
    volumes:
      - pg_slave1_data:/var/lib/postgresql/data
    ports:
      - "${SLAVE1_PORT}:5432"
    depends_on:
      master:
        condition: service_healthy
    networks:
      - pg_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  slave2:
    image: postgres:latest
    container_name: pg_slave2
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REPLICATE_FROM: master
    command: >
      bash -c "rm -rf /var/lib/postgresql/data/* &&
      until PGPASSWORD=${POSTGRES_PASSWORD} pg_basebackup -h master -D /var/lib/postgresql/data -U ${POSTGRES_USER} -P -R -X stream -S slave2_slot; do
        echo 'Waiting for master to be ready...';
        sleep 5;
      done &&
      touch /var/lib/postgresql/data/standby.signal &&
      echo \"primary_conninfo = 'host=master port=5432 user=${POSTGRES_USER} password=${POSTGRES_PASSWORD} application_name=slave2'\" >> /var/lib/postgresql/data/postgresql.auto.conf &&
      exec docker-entrypoint.sh postgres"
    volumes:
      - pg_slave2_data:/var/lib/postgresql/data
    ports:
      - "${SLAVE2_PORT}:5432"
    depends_on:
      master:
        condition: service_healthy
    networks:
      - pg_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  slave3:
    image: postgres:latest
    container_name: pg_slave3
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REPLICATE_FROM: master
    command: >
      bash -c "rm -rf /var/lib/postgresql/data/* &&
      until PGPASSWORD=${POSTGRES_PASSWORD} pg_basebackup -h master -D /var/lib/postgresql/data -U ${POSTGRES_USER} -P -R -X stream -S slave3_slot; do
        echo 'Waiting for master to be ready...';
        sleep 5;
      done &&
      touch /var/lib/postgresql/data/standby.signal &&
      echo \"primary_conninfo = 'host=master port=5432 user=${POSTGRES_USER} password=${POSTGRES_PASSWORD} application_name=slave3'\" >> /var/lib/postgresql/data/postgresql.auto.conf &&
      exec docker-entrypoint.sh postgres"
    volumes:
      - pg_slave3_data:/var/lib/postgresql/data
    ports:
      - "${SLAVE3_PORT}:5432"
    depends_on:
      master:
        condition: service_healthy
    networks:
      - pg_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  pg_master_data:
  pg_slave1_data:
  pg_slave2_data:
  pg_slave3_data:

networks:
  pg_network:
    name: ${PG_NETWORK}
    driver: bridge